-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from src/Parse/LTLParser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_ltlParser -> Phi                            (0)
	Phi -> '(' Phi ')'                                 (1)
	Phi -> id                                          (2)
	Phi -> '!' Phi                                     (3)
	Phi -> Phi '&' Phi                                 (4)
	Phi -> Phi '|' Phi                                 (5)
	Phi -> Phi '->' Phi                                (6)
	Phi -> 'G' Phi                                     (7)
	Phi -> 'F' Phi                                     (8)
	Phi -> 'X' Phi                                     (9)
	Phi -> Phi 'U' Phi                                 (10)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { L.LPar }
	')'            { L.RPar }
	id             { L.Ident $$ }
	'!'            { L.Not }
	'&'            { L.And }
	'|'            { L.Or }
	'->'           { L.Implies }
	'G'            { L.Globally }
	'F'            { L.Future }
	'X'            { L.Next }
	'U'            { L.Until }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_ltlParser rule  0
	Phi             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_ltlParser -> . Phi                           (rule 0)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 3

State 1

	Phi -> . '(' Phi ')'                                (rule 1)

	'('            shift, and enter state 2


State 2

	Phi -> '(' . Phi ')'                                (rule 1)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 17

State 3

	%start_ltlParser -> Phi .                           (rule 0)
	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> Phi . 'U' Phi                                (rule 10)

	'&'            shift, and enter state 13
	'|'            shift, and enter state 14
	'->'           shift, and enter state 15
	'U'            shift, and enter state 16
	%eof           accept


State 4

	Phi -> id .                                         (rule 2)

	')'            reduce using rule 2
	'&'            reduce using rule 2
	'|'            reduce using rule 2
	'->'           reduce using rule 2
	'U'            reduce using rule 2
	%eof           reduce using rule 2


State 5

	Phi -> '!' . Phi                                    (rule 3)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 12

State 6

	Phi -> 'G' . Phi                                    (rule 7)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 11

State 7

	Phi -> 'F' . Phi                                    (rule 8)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 10

State 8

	Phi -> 'X' . Phi                                    (rule 9)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 9

State 9

	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> 'X' Phi .                                    (rule 9)
	Phi -> Phi . 'U' Phi                                (rule 10)

	')'            reduce using rule 9
	'&'            reduce using rule 9
	'|'            reduce using rule 9
	'->'           reduce using rule 9
	'U'            reduce using rule 9
	%eof           reduce using rule 9


State 10

	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> 'F' Phi .                                    (rule 8)
	Phi -> Phi . 'U' Phi                                (rule 10)

	')'            reduce using rule 8
	'&'            reduce using rule 8
	'|'            reduce using rule 8
	'->'           reduce using rule 8
	'U'            reduce using rule 8
	%eof           reduce using rule 8


State 11

	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> 'G' Phi .                                    (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 10)

	')'            reduce using rule 7
	'&'            reduce using rule 7
	'|'            reduce using rule 7
	'->'           reduce using rule 7
	'U'            reduce using rule 7
	%eof           reduce using rule 7


State 12

	Phi -> '!' Phi .                                    (rule 3)
	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> Phi . 'U' Phi                                (rule 10)

	')'            reduce using rule 3
	'&'            reduce using rule 3
	'|'            reduce using rule 3
	'->'           reduce using rule 3
	'U'            reduce using rule 3
	%eof           reduce using rule 3


State 13

	Phi -> Phi '&' . Phi                                (rule 4)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 22

State 14

	Phi -> Phi '|' . Phi                                (rule 5)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 21

State 15

	Phi -> Phi '->' . Phi                               (rule 6)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 20

State 16

	Phi -> Phi 'U' . Phi                                (rule 10)

	'('            shift, and enter state 2
	id             shift, and enter state 4
	'!'            shift, and enter state 5
	'G'            shift, and enter state 6
	'F'            shift, and enter state 7
	'X'            shift, and enter state 8

	Phi            goto state 19

State 17

	Phi -> '(' Phi . ')'                                (rule 1)
	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> Phi . 'U' Phi                                (rule 10)

	')'            shift, and enter state 18
	'&'            shift, and enter state 13
	'|'            shift, and enter state 14
	'->'           shift, and enter state 15
	'U'            shift, and enter state 16


State 18

	Phi -> '(' Phi ')' .                                (rule 1)

	')'            reduce using rule 1
	'&'            reduce using rule 1
	'|'            reduce using rule 1
	'->'           reduce using rule 1
	'U'            reduce using rule 1
	%eof           reduce using rule 1


State 19

	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> Phi . 'U' Phi                                (rule 10)
	Phi -> Phi 'U' Phi .                                (rule 10)

	')'            reduce using rule 10
	'&'            reduce using rule 10
	'|'            reduce using rule 10
	'->'           reduce using rule 10
	'U'            reduce using rule 10
	%eof           reduce using rule 10


State 20

	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> Phi '->' Phi .                               (rule 6)
	Phi -> Phi . 'U' Phi                                (rule 10)

	')'            reduce using rule 6
	'&'            shift, and enter state 13
	'|'            shift, and enter state 14
	'->'           shift, and enter state 15
	'U'            shift, and enter state 16
	%eof           reduce using rule 6


State 21

	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi '|' Phi .                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> Phi . 'U' Phi                                (rule 10)

	')'            reduce using rule 5
	'&'            reduce using rule 5
	'|'            reduce using rule 5
	'->'           reduce using rule 5
	'U'            shift, and enter state 16
	%eof           reduce using rule 5


State 22

	Phi -> Phi . '&' Phi                                (rule 4)
	Phi -> Phi '&' Phi .                                (rule 4)
	Phi -> Phi . '|' Phi                                (rule 5)
	Phi -> Phi . '->' Phi                               (rule 6)
	Phi -> Phi . 'U' Phi                                (rule 10)

	')'            reduce using rule 4
	'&'            reduce using rule 4
	'|'            reduce using rule 4
	'->'           reduce using rule 4
	'U'            shift, and enter state 16
	%eof           reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 11
Number of terminals: 11
Number of non-terminals: 2
Number of states: 23
