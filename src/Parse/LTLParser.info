-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from src/Parse/LTLParser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_ltlParser -> Phi                            (0)
	%start_ltlProbContractParser -> PC                 (1)
	Phi -> '(' Phi ')'                                 (2)
	Phi -> id                                          (3)
	Phi -> '!' Phi                                     (4)
	Phi -> Phi '&' Phi                                 (5)
	Phi -> Phi '|' Phi                                 (6)
	Phi -> Phi '->' Phi                                (7)
	Phi -> 'G' Phi                                     (8)
	Phi -> 'F' Phi                                     (9)
	Phi -> 'X' Phi                                     (10)
	Phi -> Phi 'U' Phi                                 (11)
	PC -> 'P' '(' Phi ',' Phi ')' Cmp double           (12)
	Cmp -> '<'                                         (13)
	Cmp -> '<='                                        (14)
	Cmp -> '>'                                         (15)
	Cmp -> '>='                                        (16)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { L.LPar }
	')'            { L.RPar }
	id             { L.Ident $$ }
	'!'            { L.Not }
	'&'            { L.And }
	'|'            { L.Or }
	'->'           { L.Implies }
	'G'            { L.Globally }
	'F'            { L.Future }
	'X'            { L.Next }
	'U'            { L.Until }
	'P'            { L.Prob }
	','            { L.Comma }
	'<'            { L.Less }
	'<='           { L.Leq }
	'>'            { L.Greater }
	'>='           { L.Geq }
	double         { L.DoubleLit $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_ltlParser rule  0
	%start_ltlProbContractParser rule  1
	Phi             rules 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
	PC              rule  12
	Cmp             rules 13, 14, 15, 16

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_ltlParser -> . Phi                           (rule 0)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 6

State 1

	%start_ltlProbContractParser -> . PC                (rule 1)

	'P'            shift, and enter state 5

	PC             goto state 4

State 2

	Phi -> . '(' Phi ')'                                (rule 2)

	'('            shift, and enter state 3


State 3

	Phi -> '(' . Phi ')'                                (rule 2)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 21

State 4

	%start_ltlProbContractParser -> PC .                (rule 1)

	%eof           accept


State 5

	PC -> 'P' . '(' Phi ',' Phi ')' Cmp double          (rule 12)

	'('            shift, and enter state 20


State 6

	%start_ltlParser -> Phi .                           (rule 0)
	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 11)

	'&'            shift, and enter state 16
	'|'            shift, and enter state 17
	'->'           shift, and enter state 18
	'U'            shift, and enter state 19
	%eof           accept


State 7

	Phi -> id .                                         (rule 3)

	')'            reduce using rule 3
	'&'            reduce using rule 3
	'|'            reduce using rule 3
	'->'           reduce using rule 3
	'U'            reduce using rule 3
	','            reduce using rule 3
	%eof           reduce using rule 3


State 8

	Phi -> '!' . Phi                                    (rule 4)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 15

State 9

	Phi -> 'G' . Phi                                    (rule 8)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 14

State 10

	Phi -> 'F' . Phi                                    (rule 9)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 13

State 11

	Phi -> 'X' . Phi                                    (rule 10)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 12

State 12

	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> 'X' Phi .                                    (rule 10)
	Phi -> Phi . 'U' Phi                                (rule 11)

	')'            reduce using rule 10
	'&'            reduce using rule 10
	'|'            reduce using rule 10
	'->'           reduce using rule 10
	'U'            reduce using rule 10
	','            reduce using rule 10
	%eof           reduce using rule 10


State 13

	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> 'F' Phi .                                    (rule 9)
	Phi -> Phi . 'U' Phi                                (rule 11)

	')'            reduce using rule 9
	'&'            reduce using rule 9
	'|'            reduce using rule 9
	'->'           reduce using rule 9
	'U'            reduce using rule 9
	','            reduce using rule 9
	%eof           reduce using rule 9


State 14

	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> 'G' Phi .                                    (rule 8)
	Phi -> Phi . 'U' Phi                                (rule 11)

	')'            reduce using rule 8
	'&'            reduce using rule 8
	'|'            reduce using rule 8
	'->'           reduce using rule 8
	'U'            reduce using rule 8
	','            reduce using rule 8
	%eof           reduce using rule 8


State 15

	Phi -> '!' Phi .                                    (rule 4)
	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 11)

	')'            reduce using rule 4
	'&'            reduce using rule 4
	'|'            reduce using rule 4
	'->'           reduce using rule 4
	'U'            reduce using rule 4
	','            reduce using rule 4
	%eof           reduce using rule 4


State 16

	Phi -> Phi '&' . Phi                                (rule 5)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 27

State 17

	Phi -> Phi '|' . Phi                                (rule 6)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 26

State 18

	Phi -> Phi '->' . Phi                               (rule 7)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 25

State 19

	Phi -> Phi 'U' . Phi                                (rule 11)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 24

State 20

	PC -> 'P' '(' . Phi ',' Phi ')' Cmp double          (rule 12)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 23

State 21

	Phi -> '(' Phi . ')'                                (rule 2)
	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 11)

	')'            shift, and enter state 22
	'&'            shift, and enter state 16
	'|'            shift, and enter state 17
	'->'           shift, and enter state 18
	'U'            shift, and enter state 19


State 22

	Phi -> '(' Phi ')' .                                (rule 2)

	')'            reduce using rule 2
	'&'            reduce using rule 2
	'|'            reduce using rule 2
	'->'           reduce using rule 2
	'U'            reduce using rule 2
	','            reduce using rule 2
	%eof           reduce using rule 2


State 23

	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 11)
	PC -> 'P' '(' Phi . ',' Phi ')' Cmp double          (rule 12)

	'&'            shift, and enter state 16
	'|'            shift, and enter state 17
	'->'           shift, and enter state 18
	'U'            shift, and enter state 19
	','            shift, and enter state 28


State 24

	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 11)
	Phi -> Phi 'U' Phi .                                (rule 11)

	')'            reduce using rule 11
	'&'            reduce using rule 11
	'|'            reduce using rule 11
	'->'           reduce using rule 11
	'U'            reduce using rule 11
	','            reduce using rule 11
	%eof           reduce using rule 11


State 25

	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> Phi '->' Phi .                               (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 11)

	')'            reduce using rule 7
	'&'            shift, and enter state 16
	'|'            shift, and enter state 17
	'->'           shift, and enter state 18
	'U'            shift, and enter state 19
	','            reduce using rule 7
	%eof           reduce using rule 7


State 26

	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi '|' Phi .                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 11)

	')'            reduce using rule 6
	'&'            reduce using rule 6
	'|'            reduce using rule 6
	'->'           reduce using rule 6
	'U'            shift, and enter state 19
	','            reduce using rule 6
	%eof           reduce using rule 6


State 27

	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi '&' Phi .                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 11)

	')'            reduce using rule 5
	'&'            reduce using rule 5
	'|'            reduce using rule 5
	'->'           reduce using rule 5
	'U'            shift, and enter state 19
	','            reduce using rule 5
	%eof           reduce using rule 5


State 28

	PC -> 'P' '(' Phi ',' . Phi ')' Cmp double          (rule 12)

	'('            shift, and enter state 3
	id             shift, and enter state 7
	'!'            shift, and enter state 8
	'G'            shift, and enter state 9
	'F'            shift, and enter state 10
	'X'            shift, and enter state 11

	Phi            goto state 29

State 29

	Phi -> Phi . '&' Phi                                (rule 5)
	Phi -> Phi . '|' Phi                                (rule 6)
	Phi -> Phi . '->' Phi                               (rule 7)
	Phi -> Phi . 'U' Phi                                (rule 11)
	PC -> 'P' '(' Phi ',' Phi . ')' Cmp double          (rule 12)

	')'            shift, and enter state 30
	'&'            shift, and enter state 16
	'|'            shift, and enter state 17
	'->'           shift, and enter state 18
	'U'            shift, and enter state 19


State 30

	PC -> 'P' '(' Phi ',' Phi ')' . Cmp double          (rule 12)

	'<'            shift, and enter state 32
	'<='           shift, and enter state 33
	'>'            shift, and enter state 34
	'>='           shift, and enter state 35

	Cmp            goto state 31

State 31

	PC -> 'P' '(' Phi ',' Phi ')' Cmp . double          (rule 12)

	double         shift, and enter state 36


State 32

	Cmp -> '<' .                                        (rule 13)

	double         reduce using rule 13


State 33

	Cmp -> '<=' .                                       (rule 14)

	double         reduce using rule 14


State 34

	Cmp -> '>' .                                        (rule 15)

	double         reduce using rule 15


State 35

	Cmp -> '>=' .                                       (rule 16)

	double         reduce using rule 16


State 36

	PC -> 'P' '(' Phi ',' Phi ')' Cmp double .          (rule 12)

	%eof           reduce using rule 12


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 17
Number of terminals: 18
Number of non-terminals: 5
Number of states: 37
